Below is a new set of instructions you can copy and paste into the Replit agent. We will further tighten the system prompt and introduce a simple mechanism to ensure the AI knows how many questions it has asked. Additionally, we’ll instruct it to finalize the condition and appointment after the third user response, and then produce a deterministic next step message.

Instructions for Replit Agent:
	1.	Add a Question Counter Mechanism in Code
In your code (e.g., app.py), maintain a simple integer counter in the session or conversation state that tracks how many questions the assistant has asked. Each time the assistant returns a message that includes a question, increment this counter. After the user replies to the third question, add a system message telling the AI it has reached its limit and must now finalize.
Example (Pseudo-code):

# Suppose you store conversation messages in a variable `messages`
# and you have a user_session dict to track state (if using Flask session or similar)

# Each time you send a request to openai.ChatCompletion.create:
# Before you call the API, count how many messages from the assistant contain a '?'
# This is a heuristic: 

assistant_questions_asked = sum(1 for m in messages if m['role'] == 'assistant' and '?' in m['content'])

# If assistant_questions_asked >= 3 and the user just replied:
# Add a system message forcing finalization:
if assistant_questions_asked >= 3:
    messages.append({"role": "system", "content": "You have asked 3 questions already. Now you MUST choose the most likely condition, recommend the appointment type, and provide the info card link if available. Do not ask more questions."})

This ensures that after the third user response, the next assistant answer will follow the finalization rule.

	2.	Update the System Prompt (prompts/system_prompt.txt)
Replace the system prompt with this stricter version:

You are a dental AI assistant.

Process:
- On your first reply, ask up to 1 question to clarify symptoms (Question #1).
- On your second reply, you may ask another question (Question #2) if needed.
- On your third reply, you may ask a final question (Question #3) if needed.
- After the user responds to your third question (i.e., after you have asked 3 questions in total), you MUST finalize:
  1. Identify the most likely condition from the conditions list.
  2. If no good match, choose the fallback 'Uncertain or Mild Oral Health Concerns' condition.
  3. Recommend the corresponding appointment type.
  4. If the condition has `info_card_id`, say: "For more information, please visit: https://<your-domain>/card?id=INFO_CARD_ID&lang=en"
  5. Then finalize by saying something like: "It seems like you need an appointment for <appointment type>. Here are all available times..."

Rules:
- Never ask more than 3 questions total. The code logic will remind you if you have reached the limit.
- After 3 questions are asked and answered, do not ask more questions. Immediately pick condition and appointment type.
- Be concise, empathetic, and follow instructions strictly.
- Do not provide definitive diagnoses, only likely conditions and professional consultation advice.

Replace <your-domain> with your actual domain or Replit URL.

	3.	Integrate Conditions and Appointment Types into Prompt at Runtime
Keep your previous logic that appends conditions and appointment types summaries to final_system_prompt.
	4.	Set Temperature to 0 for Deterministic Output
In the get_ai_response (or equivalent) function:

def get_ai_response(user_message):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,  # messages includes system prompt + user messages
        temperature=0.0
    )
    return response.choices[0].message.content


	5.	Test the Flow:
	•	Start a conversation.
	•	The AI asks a question (count is 1).
	•	You answer.
	•	The AI asks a second question (count is 2).
	•	You answer.
	•	The AI asks a third question (count is 3).
	•	You answer.
	•	Now the code sees 3 questions asked, it adds the system reminder message.
	•	The AI must now finalize by choosing a condition and recommending the appointment type.

If the AI still fails to follow instructions, add even more explicit language to the system prompt or consider adding a final forced system message after the user’s third reply stating “You have asked 3 questions, now finalize,” as described above.

Copy and paste these instructions into the Replit agent so it can update your code and prompt accordingly.